#!/usr/bin/env python

# Script to run the sequence enrichment simulator.
# Developed by C. Bouyioukos @TSL, Nov 2010.

import os
import sys
import argparse
import subprocess
import shlex
import re
import shutil


import seqEnrichSim


# Instantiate the command line parameters parser.
parser = argparse.ArgumentParser(description='Conduct a sequence enrichment simulator experiments. The series of experiments will be determined by the control parameters file and by the existence of intermediate files in the experimental pipeline.')
# Construct individual arguments.
parser.add_argument('-p', '--params', type=str, metavar = '<control_parameters_file>', required = True, help = 'The simulator control parameters file, usualy a .cpf file (compulsory).', dest = 'paramFile')
parser.add_argument('-i', '--infiles', type=str, metavar = '<template_sequence_FASTA_file>', required = True, nargs = '+', help = 'Whitespace separated filenames, specifying the genomic/transcriptomic template sequence fasta files (compulsory).', dest = 'infileList')
parser.add_argument('-r', '--seedCorrector', metavar = '<rndSeed_Corrector>', type = int, help = 'A correector for the rndSeed of the library generation procedure, to be used when single sequence template files from the same source are used in each individual run of the simulator.', dest = 'rndSeedCorrector')

# Generate the arguments list namespace.
ns = parser.parse_args()

# Get a list of the basenames of the arguments of the input file list.
basenamesList = [ os.path.splitext(os.path.split(name)[1])[0] for name in ns.infileList ]


################
# Main program #
################

# Instantiate the parser of the control parameters file.
cpParser = seqEnrichSim.ParametersParser(ns.paramFile)
# Parse the control parameters.
cParams = cpParser.parse()

## All the components of the simulator will be checked and executed here.


# Generate the NGS filenames.
ngsType = cParams.ngsParameters.sequencingPlatform
ngsFilesList = [name + '_' + ngsType + 'Reads.fasta' for name in basenamesList]


# Run the NGS simulation only for the files that is needed.
rndSeedCorr = 0
for i in xrange(len(ngsFilesList)) :
  if not os.path.exists(ngsFilesList[i]) :
    # Instantiate the library factory.
    libraryFact = seqEnrichSim.LibraryFactory(cParams.libraryParameters, rndSeedCorr)
    # Generate the sequencing library.
    libFragments = libraryFact(ns.infileList[i])
    # Instantiate the NGS factory.
    ngsFact = seqEnrichSim.NGSFactory(cParams.ngsParameters)
    # Generate NGS reads.
    ngsReads = ngsFact(libFragments)
    # Write them on the file.
    ngsFH = open(ngsFilesList[i], 'w')
    seqEnrichSim.print_SeqRecord_list(ngsReads, ngsFH)
  rndSeedCorr = rndSeedCorr + 1


# Generate the sequence homology filenames.
seqHomolOufiles = [name + '_SeqHomol.fasta' for name in basenamesList]


# Check the existence of the selected reads FASTA files and conduct the
# sequence homology experiments..
for i in xrange(len(seqHomolOufiles)) :
  if not os.path.exists(seqHomolOufiles[i]) :
    # Generate a temporary file to hold the 6 open reading frames for each
    # read.
    #TODO generate a proper TMP file in the /tmp directory
    #(and then accordingly delete it). MOVE the whole process in the module!!
    translTMPfile = ngsFilesList[i] + "._TMP"
    translCmd = 'transeq -frame 6 ' + ngsFilesList[i] + ' ' + translTMPfile
    # Execute the translation.
    subprocess.call(shlex.split(translCmd), bufsize = -1)
    # Instantiate the Sequence Homology class.
    seqHomol = seqEnrichSim.SequenceHomolgyFactory(cParams.seqHomolParameters, cParams.ngsParameters)
    # Execute the procedure.
    seqHomolRecs = seqHomol(translTMPfile, ngsFilesList[i])
    # Print the sequences ot the relative file.
    seqHomolFH = open(seqHomolOufiles[i], 'w')
    seqEnrichSim.print_SeqRecord_list(seqHomolRecs, seqHomolFH)
    # Delete the TMP file.
    os.remove(translTMPfile)


# Concatenate all the sequence homology files to one.
allSeqFile = 'all_SeqHomol.fasta'
dest = open('all_SeqHomol.fasta', 'wb')
for fl in seqHomolOufiles :
  shutil.copyfileobj(open(fl, 'rb'), dest)


# Generate the sequence assembly filenames.
assemblyOutfile = 'seqHomol_Assembly.fasta'


# Check the existence of the assembly file and conduct the assemblies.
assemblyFilename = 'selectedAssembledContigs.fasta'
assemblyStatsFile = 'assemblyStats.fasta'
if not os.path.exists(assemblyOutfile) :
  # Conduct the assembly.
  assemblyFact = seqEnrichSim.AssemblyFactory(cParams.assemblyParameters, cParams.libraryParameters)
  selectedAssmblyFile = assemblyFact(allSeqFile)
  distance = assemblyFact.assess_assembly(selectedAssmblyFile)
print 'Best assembly : %s' % selectedAssmblyFile
print 'Distance form perfect assembly: %f' % distance

