#!/usr/bin/env python

# Script to run the sequence enrichment simulator.
# Developed by C. Bouyioukos @TSL, Nov 2010.

import os
import sys
import getopt
import subprocess
import re

import seqEnrichSim

def usage() :
  print """
  """


# Initialise parameters.
paramFile = None


# Parse the command line parameters.
optlist, args = getopt.getopt(sys.argv[1:], 'hp:', ['help'])

for opt, par in optlist :
  if opt in ('-h', '--help') :
    usage()
    sys.exit()
  if opt == '-p' :
    paramFile = par


# Check for compulsory parameters.
if not paramFile :
  raise StandardError, 'Please specify a control parameters file (option -p) it is compulsory for the running of the simulator.'


# I/O manipulation.
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  if os.path.exists(args[1]) :
    # Compile the command line call.
    cmdLine = 'hmmsearch NB-LRR.hmm ' + args[1]
    # Run the HMM and collect the read names.
    hmmSearch = subprocess.Popen(cmdLine.split(), stdout=subprocess.PIPE).communicate()[0]
    for line in hmmSearch.split("\n") :
      if re.match('>>', line) :
        print line
    sys.exit()
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout


################
# Main program #
################

# Instantiate the parser of the control parameters file.
cpParser = seqEnrichSim.ParametersParser(paramFile)

# Parse the file.
cParams = cpParser.parse()

# Instantiate the library factory.
libFact = seqEnrichSim.LibraryFactory(cParams.libraryParameters)

# Generate the sequencing library.
lib = libFact.generate_sequencing_library(infile)

# Instantiate the NGS factory.
ngsFact = seqEnrichSim.NGSFactory(cParams.ngsParameters, lib)

# Generate NGS reads.
ngsReads = ngsFact.generate_ngs_reads()

# Generate the 6 frames of the reads.
translFact = seqEnrichSim.TranslationFactory(ngsReads)
translReads = translFact(6)

# print.
seqEnrichSim.print_SeqRecord_list(translReads, outfile)

# Compile the command line call.
cmdLine = 'hmmsearch NB-LRR.hmm ' + outfile.name

# Run the HMM and collect the read names.
hmmSearch = subprocess.Popen(cmdLine.split()).communicate()[0]

for line in hmmSearch :
  if re.match('>>', line) :
    print line

