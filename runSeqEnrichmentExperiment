#!/usr/bin/env python

# Script to run the sequence enrichment simulator.
# Developed by C. Bouyioukos @TSL, Nov 2010.

import os
import argparse
#import subprocess
#import shlex
import shutil
import gzip

import seqEnrichSim


# Instantiate the command line parameters parser.
parser = argparse.ArgumentParser(description='Conduct a sequence enrichment simulator experiments. The series of experiments will be determined by the control parameters file and by the existence of intermediate files in the experimental pipeline.')
# Construct individual arguments.
parser.add_argument('-p', '--params', type=str, metavar = '<control_parameters_file>', required = True, help = 'The simulator control parameters file, usualy a .cpf file (compulsory).', dest = 'paramFile')
parser.add_argument('-i', '--infiles', type=str, metavar = '<template_sequence_FASTA_file>', required = True, nargs = '+', help = 'Whitespace separated filenames, specifying the genomic/transcriptomic template sequence fasta files (compulsory).', dest = 'infileList')
parser.add_argument('-r', '--seedCorrector', metavar = '<rndSeed_Corrector>', type = int, help = 'A correector for the rndSeed of the library generation procedure, to be used when single sequence template files from the same source are used in each individual run of the simulator.', dest = 'rndSeedCorr', default = 0)

# Generate the arguments list namespace.
ns = parser.parse_args()

# Get a list of the basenames of the arguments of the input file list.
basenamesList = [ os.path.splitext(os.path.split(name)[1])[0] for name in ns.infileList ]


################
# Main program #
################

# Instantiate the parser of the control parameters file.
cpParser = seqEnrichSim.ParametersParser(ns.paramFile)
# Parse the control parameters.
cParams = cpParser.parse()

## All the components of the simulator will be checked and executed here.


# Generate the NGS filenames.
ngsType = cParams.ngsParameters.sequencingPlatform
ngsFilesList = [name + '_' + ngsType + 'Reads.fasta.gz' for name in basenamesList]


# Run the NGS simulation only for the files that is needed.
rndSeedCorr = ns.rndSeedCorr
for i in xrange(len(ngsFilesList)) :
  if not (os.path.exists(ngsFilesList[i]) or os.path.exists(ngsFilesList[i][:-3])) :
    # Instantiate the library factory.
    libraryFact = seqEnrichSim.LibraryFactory(cParams.libraryParameters, rndSeedCorr)
    # Generate the sequencing library.
    libFragmentsCoords = libraryFact(ns.infileList[i], cParams.ngsParameters)
    # Instantiate the NGS factory.
    ngsFact = seqEnrichSim.NGSFactory(cParams.ngsParameters, str(ns.infileList[i]))
    # Generate NGS reads and write them on the file.
    ngsFact(libFragmentsCoords, ngsFilesList[i])
  rndSeedCorr = rndSeedCorr + 1


# Generate the sequence homology filenames.
seqHomolOufiles = [name + '_SeqHomol.fasta.gz' for name in basenamesList]

# Check the existence of the selected reads FASTA files and conduct the
# sequence homology experiments.
for i in xrange(len(seqHomolOufiles)) :
  if not os.path.exists(seqHomolOufiles[i]) :
    # Instantiate the Sequence Homology class.
    seqHomol = seqEnrichSim.SequenceHomolgyFactory(cParams.seqHomolParameters, cParams.ngsParameters)
    # Execute the procedure.
    #TODO change the output of SequenceHomolgyFactory to a fasta.gz file
    seqHomolRecs = seqHomol(ngsFilesList[i], seqHomolOufiles[i])


# Set the assembly files list
assFilesList = []
# Naive checking for the need to collect all the sequence homology files.
# TODO change it ot perhaps someting more robust.
if os.path.exists(seqHomolOufiles[0]) :
  assFilesList = seqHomolOufiles
else :
  assFilesList = ngsFilesList

# Check the existence of the assembly file and conduct the assemblies.
assemblyFilename  = 'bestAssemblyContigs.fasta'
assemblyStatsFile = 'bestAssemblyStats.txt'
# Instantiate the assembly factory.
assemblyFact = seqEnrichSim.AssemblyFactory(cParams.assemblyParameters, cParams.libraryParameters)
if not os.path.exists(assemblyFilename) :
  # Conduct the assembly.
  selectedAssemblyFile = assemblyFact(assFilesList)
  shutil.copyfile(selectedAssemblyFile, assemblyFilename)
# Assess the assembly.
distance = assemblyFact.assess_assembly(assemblyFilename, assemblyStatsFile, 'nucl')

print 'Distance from reference assembly: %.4f' % distance

