#!/usr/bin/env python

# Script to run the sequence enrichment simulator.
# Developed by C. Bouyioukos @TSL, Nov 2010.

import sys
import getopt

import Bio
from Bio import SeqIO

import seqEnrichSim

def usage() :
  print """
  """


# Initialise parameters.
paramFile = None


# Parse the command line parameters.
optlist, args = getopt.getopt(sys.argv[1:], 'hp:', ['help'])

for opt, par in optlist :
  if opt in ('-h', '--help') :
    usage()
    sys.exit()
  if opt == '-p' :
    paramFile = par


# Check for compulsory parameters.
if not paramFile :
  raise StandardError, 'Please specify a control parameters file (option -p) it is compulsory for the running of the simulator.'


# I/O manipulation.
if len(args) > 0 :
  infile = open(args[0], 'r')
else :
  infile = sys.stdin
if len(args) > 1 :
  outfile = open(args[1], 'w')
else :
  outfile = sys.stdout


################
# Main program #
################

# Instantiate the parser of the control parameters file.
cpParser = seqEnrichSim.ParametersParser(paramFile)

# Parse the file.
cParams = cpParser.parse()

# Instantiate the library factory.
libFact = seqEnrichSim.LibraryFactory(cParams.libraryParameters)

## Get the reference sequence form the input file.
#rsParser = Bio.SeqIO.parse(infile, "fasta")
#refSeq = rsParser.next()

# Generate the sequencing library.
lib = libFact.generate_sequencing_library(infile)

# Instantiate the NGS factory.
ngsFact = seqEnrichSim.NGSFactory(cParams.ngsParameters, lib)

# Generate NGS reads.
reads = ngsFact.generate_ngs_reads()

# print
ngsFact.print_ngs_sequencing(reads, outfile)
#libFact.print_library(lib, outfile)

